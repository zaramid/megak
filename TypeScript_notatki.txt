Przykładowy plik konfiguracyjny opisujący działanie TypeScript:

tsconfig.json

{
  "compilerOptions": {
    "noImplicitAny": true,		// pokaż błąd gdy przypisany typ danych to 'any'
    "preserveConstEnums": true,		// typ Enum zostanie w wygenerowanym JS
    "sourceMap": true,			// włącza sourceMap by widzieć połączenie JS z TS (np. błędy)
    "target": "es6",			// jaka wersję JS wygenerować
    "downlevelIteration": true,		// działanie nowych pętli np. for..of i for..in
    "lib": ["es6", "dom.iterable"],	// co jest dostępne. W jakim jesteśmy środowisku. Można dopisać "dom", gdy jest to aplikacja frontendowa
    "outDir": "dist"			// nazwa folderu wyjściowego, w którym będzie umieszczony przetranspilowany JS
  }
}

Tu opisany: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html

Webstorm ma wbudowanego TypeScripta.

W Settings -> Languages&Frameworks -> TypeScript zaznaczamy:

x TypeScript language service
x Show project errors
x Recompile on changes

Rozszerzenia plików TypeScript to .ts

TypeScript działa w momencie pisania programu, nie w momencie uruchomienia.

**********************

		Typescript w Visual Studio Code

1. npm i -g typescript  // tylko raz w systemie. Instalacja globalna.

2. tsc --version  // wyświetla wersję TypeScript

3. Trzeba stworzyć plik automatyzacji, który mówi aby obserwować zmiany w kodzie i go kompilować:

.vscode/tasks.json

{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "typescript",
            "type": "typescript",
            "tsconfig": "tsconfig.json",
            "option": "watch",
            "auto": true,
            "problemMatcher": [
                "$tsc-watch"
            ]
        }
    ]
}

4. Zainstalować plugin AutoLauch:
https://marketplace.visualstudio.com/items?itemName=philfontaine.autolaunch

**************************

Deno

Alternatywa dla Node.js. TypeScript działa na niej natywnie.

**************************

		ts-node
		
Pozwala korzystać z TypeScript bez względu na środowisko, w jakim pracujemy.

Instalacja globalna: 

npm i -g ts-node

W katalogu naszej aplikacji instalujemy go dla developera:

npm i -D ts-node

Można stworzyć skrypt w package.json:

"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "ts-node index.ts"
  },
  
Aby zautomatyzować wykrywanie zmian:

1. Zainstaluj npm i -D ts-node-dev
2. Wywołaj: tsnd index.ts lub ts-node-dev index.ts
3. Można dodać skrypt do package.json:

"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "ts-node index.ts",
    "start:dev": "tsnd index.ts"
  },
  
*****************************

Można też testować TypeScripta na https://www.typescriptlang.org/play

*****************************

Typy danych:

- można wypisywać wartości zmiennych jako ich typ:

const foobar: 'Biały' | 'Żółty' | 'Zielony' = 'Biały';

- typ Array jest typem generycznym, tzn. ma w sobie inny typ:

const foo: Array<number> = [1, 2, 3];
const bar: Array<string> = ['asc', 'qwe', 'zxc'];

const foobar: Array<string | number> = [1, '2', 3, 'qaz'];

- możliwe jest takie zachowanie:

const bar: Array<string> = ['asc', 'qwe', 'zxc'];
const data = JSON.parse('123'); // data jest liczbą!
bar.push(data); 
console.log(bar); // tablica stringów bar zawiera także liczbę data, lecz TypeScript nie zwrócił błędu!!!

TypeScript nie może sobie z tym poradzić, bo nie wie jakie dostaniemy dane.

Trzeba dane sprawdzać samemu, np.:

if (typeof data !== 'string') {
   throw new Error('Invalid data type. String expected.');
}

Inny, popularniejszy zapis tablic:

const bar: string[] = ['asc', 'qwe', 'zxc'];
const foobar: (string | number)[] = [1, '2', 3, 'qaz'];

Gdy tablica jest oczywista, można nie podawać typu, ale gdy jest pusta, to trzeba, bo TypeScript nada jej typ 'any'.

- enum

Zawsze z wielkiej litery:

enum UserRole {
    Admin,
    User,
    BannedUser,
}

Poszczególne pozycje mają przypisane indeksy zaczynające się od 0.

Zastosowanie:

const piotrUserRole = UserRole.Admin;

console.log(piotrUserRole); // wyświetli '0'

- void

Stosowane aby zaznaczyć, że funkcja nic nie zwraca.

- null

np.:

const foobar: number | null = 123;

- undefined

******************************

		Rzutowanie
		
Konwersja jednego typu na inny wykonywana w sposób jawny.

const data = JSON.parse(json); 

tutaj data ma typ 'any', gdyż TypeScript nie potrafi przewidzieć jej typu.
Można nadać właściwy typ zmiennej data, np.:

const data = JSON.parse(json) as number; 

Możliwy jest też zapis, który ponoć nie zawsze działa:

const data: number = JSON.parse(json);

*******************************

		Interfejsy
		
Interfejs to jest określenie struktury danych.  
Po transpilacji na JavaScript wszystko co związane z interfejsami zniknie. 
Interfejsy pozwalają podnieść poziom abstrakcji i uzyskać luźniejsze powiązania pomiędzy klasami w naszych aplikacjach. 
Pozwala to projektować zależności nie ograniczając się do konkretnego typu – wystarczy, aby dany typ spełniał zadany interfejs.

Interfejsy są kontraktem – to znaczy, jeżeli dana klasa, czy obiekt implementuje konkretny interfejs to zobowiązuje się ona do spełnienia jego wszystkich wymogów. 
Jakie są wymogi? Najczęściej ograniczają się one do utworzenia metod o konkretnej sygnaturze.

interface Person {
    name: string;
    age: number;
    isDeveloper: boolean;
}

const personA: Person = {
   name: 'Piotr',
   age: 52,
   isDeveloper: true,
}

Możliwy też jest zapis:

const personB = {
   name: 'Gosia',
   age: 52,
   isDeveloper: false,
} as Person;

W funkcji:

function greet(person: Person): void {
   console.log(`Hello ${person.name}`);
}

greet(personB);

greet({
   name: 'Filip',
   age: 33,
   isDeveloper: false,
});

Interfejs może też zawierać funkcje:

interface Person {
    name: string;
    age: number;
    isDeveloper: boolean;
    greet(): void;
    // greet: () => void; // inny zapis funkcji
}

const personA: Person = {
   name: 'Piotr',
   age: 52,
   isDeveloper: true,
   greet(): void {
      console.log(`Hello ${this.name}`);
   }
}

W interfejsie mogą też być właściwości opcjonalne, jak np. address:

interface Person {
    name: string;
    age: number;
    isDeveloper: boolean;
    address?: string;
    greet(): void;
}

Podczas implementacji np. obiektu, trzeba sprawdzać, czy ta właściwość opcjonalna istnieje, np.:

if (person.address) {...}

Interfejs można użyć do opisania obiektów np. tablicy:

interface Person {
    name: string;
    age: number;
}

// tablica obiektów typu Person
const ar: Person[] = [
    {
        name: 'Piotr',
        age: 52,
    },
    {
        name: 'Gosia',
        age: 52,
    }
];

---

Klasy mogą implementować intefejsy:

class Person {
   name: string;
   age: number;

   constructor(name: string, age: number) {
      this.name = name;
      this.age = age;
   }
}

Można połączyć klasę z interfejem:

interface Human {
   name: string;
   surname: string;
   age: number;
}

class Person implements Human {
   name: string;
   surname: string = ''; // wartość domyślna
   age: number;

   constructor(name: string, age: number) {
      this.name = name;
      // this.surname = '';
      this.age = age;
   }
}

a nawet z kilkoma interfejsami:

interface Human {
   name: string;
   surname: string;
   age: number;
}

interface GetHistory {
   history: string[];
   showHistory(): void;
}

class Person implements Human, GetHistory {
   name: string;
   surname: string = ''; // wartość domyślna
   age: number;
   history: string[] = [];

   constructor(name: string, age: number) {
      this.name = name;
      // this.surname = '';
      this.age = age;
   }

   showHistory(): void {
      console.log(this.history);
   }
}


Interfejsy mogą rozszerzać (dziedziczyć) inne interfejsy:

interface Human {
   name: string;
   surname: string;
   age: number;
}

interface HumanWithRole extends Human {
   role: string;
}

class User implements HumanWithRole {
   role: string;
   name: string;
   surname: string;
   age: number;

}


Interfejs jako typ danych w tabeli (w innym interfejsie):

interface HistoryEntry {
   createdAt: Date;
   event: string;
}

interface History {
   history: HistoryEntry[];
}


***********************

		type
		
Typy nazywamy z wielkiej litery.
		
Gdy mamy np.:

const abc: number | string = 123;
const xyz: number | string = 456;

function sum(a: number | string, b: number | string): string {
   return (a as string + b as string);
}

to "number | string" się powtarza.
Można więc stworzyć typ:

type NumOrStr = number | string;

i użyć go w powyższym przykładzie:

const abc: NumOrStr = 123;
const xyz: NumOrStr = 456;

function sum(a: NumOrStr, b: NumOrStr): string {
   return (a as string + b as string);
}

************************

		klasy
		
class Human {
    name: string;
    surname: string;

    constructor(name: string, surname: string) {
        this.name = name;
        this.surname = surname;
    }
}


- Klasa jako typ

klasa jest również typem, np.

function greet(person: Human) {
    console.log(`Hello ${person.name}!`);
}

- "super"
Działa podobnie jak w JS ES6:

class Animal {
    specieName: string;

    constructor(specieName: string) {
        this.specieName = specieName;
    }
}

class Human extends Animal {
    name: string;
    surname: string;
    
    constructor(name: string, surname: string) {
        super('human'); // wykonujemy konstruktor klasy, z której dziedziczymy
        this.name = name;
        this.surname = surname;
    }
}

- Deklarowanie i Inicjalizowanie pól w klasach TypeScript

class Human extends Animal {
    name: string;
    surname: string;
    liveEvents: string[] = []; // to pole faktycznie jest przenoszone do konstruktora
    isAlive = true; // można ominąć typowanie, gdyż typ zmiennej jest oczywisty dla TS
    
    constructor(name: string, surname: string) {
        super('human');
        this.name = name;
        this.surname = surname;
    }
}

- Automatyczne deklarowanie i przekazywanie pól z konstruktora

Zamiast pisać:

class Human {
    name: string;
    surname: string;
    
    constructor(name: string, surname: string) {
        this.name = name;
        this.surname = surname;
    }
}

można:

class Human {    
    constructor(public name: string, public surname: string) {
    }
}

Dla czytelności lepiej zapisywać:

class Human {    
    constructor(
        public name: string, 
        public surname: string
    ) {}
}

A tak wygląda jeden z poprzednich przykładów:

class Animal {
    constructor(
        public specieName: string
    ) {}
}

class Human extends Animal {
    liveEvents: string[] = [];
    isAlive = true;
    
    constructor(
        public name: string, 
        public surname: string
    ) {
        super('human');
    }
}


- "readonly" - czyste klasy

Właściwość nadana w momencie tworzenia obiektu nie może być później zmieniona:

class Human {
    readonly liveEvents: string[] = [];
    isAlive = true;
    
    constructor(
        public readonly name: string, 
        public readonly surname: string
    ) {}
}

const piotrek = new Human('Piotr', 'Zawadzki');
piotrek.name = 'John'; // nie pozwala na zmianę "name"
piotrek.liveEvents = []; // nie wolno
piotrek.liveEvents.push('Urodziny'); // zadziała

czyli "readonly" działa podobnie do "const".


	- Modyfikatory dostępów

1. public - domyślny, gdy nie podamy żadnego modyfikatora
oznacza on, że dana właściwość może być modyfikowana z zewnątrz obiektu.

2. private

class Pc {
    private isOn = false; // ustawiamy jako właściwość prywatną

    constructor(
        public cpu: string,
        public ram: number,
    ) {};

    on() {
        console.log('Loading BIOS...');
        if (!this.cpu) {
            throw new Error('CPU is lacking.');
        }
        this.isOn = true;
    }
}

const piotrsComputer = new Pc('Core 2 Duo', 4096);
piotrsComputer.isOn = true; // BŁĄD!!! Nie można jej modyfikować, gdyż jest prywatna

isOn może być tylko zmodyfikowane poprzez metodę z wnętrza klasy on():

piotrsComputer.on();

'private' może też być w konstruktorze:

class Pc {
    private isOn = false;

    constructor(
        private cpu: string,
        private ram: number,
    ) {};

    on() {
        console.log('Loading BIOS...');
        if (!this.cpu) {
            throw new Error('CPU is lacking.');
        }
        this.isOn = true;
    }

    changeCPU(newCPU: string) {
        if (newCPU === '') {
            throw new Error('CPU is required.');
        }
        this.cpu = newCPU;
    }
}

const piotrsComputer = new Pc('Core 2 Duo', 4096);
piotrsComputer.changeCPU('Athlon 777');
piotrsComputer.on();

3. protected

Gdy mamy kod:

class Animal {
    constructor(
        private readonly specieName: string;
    ) {};
}

class Human extends Animal {
    private readonly liveEvents: string[] = [];
    private isAlive = true;
    
    constructor(
        public name: string, 
        public surname: string
    ) {
        super('human');
    }

    addLiveEvent(event: string): void {
        this.liveEvents.push(event);
    }

    getLiveEvents(): string[] {
        return this.liveEvents;
    }
    
    
    // Ta metoda NIE ZADZIAŁA, gdy specieName jest prywatne w klasie Animal
    // ale ZADZIAŁA, gdy zmienimy ją na "protected", gdyż wtedy klasa rozszerzająca ma do niej dostęp. Nie ma jednak do niej dostępu spoza klasy rozszerzającej.
    
    showSpecieName(): string {
        return this.specieName;
    }
    
}

const piotr = new Human('Piotr', 'Zawadzki');
piotr.addLiveEvent('Urodziny');

console.log(piotr.specieName); // NIE ZADZIAŁA, bo "protected"

console.log(piotr.showSpecieName());

Z 'private' korzysta się bardzo często, z 'protected' niezbyt.

Metody również mogą mieć modyfikatory dostępu.

W kodzie:

class Animal {
    constructor(
        protected readonly specieName: string,
    ) {};
}

class Human extends Animal {
    private readonly liveEvents: string[] = [];
    private isAlive = true;
    
    constructor(
        public name: string, 
        public surname: string
    ) {
        super('human');
    }

    addLiveEvent(event: string): void {
        this.liveEvents.push(event);
        this.checkPulse();
    }

    getLiveEvents(): string[] {
        return this.liveEvents;
    }

    showSpecieName(): string {
        return this.specieName;
    }

    private checkPulse(): void {
        console.log('Sprawdzam puls');
    }
}

metoda checkPulse() może być ujżyta tylko wewnątrz klasy.

***********************

		gettery i settery
		
Getter get jest metodą, ale korzystamy z niego jak z pola:

class Animal {
    constructor(
        protected readonly specieName: string,
    ) {};
}

class Human extends Animal {
    private readonly liveEventsList: string[] = [];
    private isAlive = true;
    
    constructor(
        private name: string, 
        private surname: string
    ) {
        super('human');
    }

    addLiveEvent(event: string): void {
        this.liveEventsList.push(event);
    }

    get liveEvents(): string[] {	// to jet metoda
        return this.liveEventsList;
    }

    showSpecieName(): string {
        return this.specieName;
    }

}

const piotr = new Human('Piotr', 'Zawadzki');
piotr.addLiveEvent('Urodziny');
piotr.addLiveEvent('Ukonczenie kursu');

console.log(piotr.showSpecieName());

console.log(piotr.liveEvents);		// wywołujemy ją jak pole

- utworzenie settera:

class Animal {
    constructor(
        protected readonly specieName: string,
    ) {};
}

class Human extends Animal {
    private readonly liveEventsList: string[] = [];
    private isAlive = true;
    
    constructor(
        private name: string, 
        private surname: string
    ) {
        super('human');
    }

    addLiveEvent(event: string): void {
        this.liveEventsList.push(event);
    }

    get liveEvents(): string[] {
        return this.liveEventsList;
    }

    showSpecieName(): string {
        return this.specieName;
    }

    get alive(): boolean {
        return this.isAlive;
    }

    set alive(newIsAlive: boolean) {		// to jest setter
        if (!this.isAlive && newIsAlive) {
            throw new Error('You are not God!');
        }
        this.isAlive = newIsAlive;
    }

}

// const piotr = new Human('Piotr', 'Zawadzki');
// piotr.addLiveEvent('Urodziny');
// piotr.addLiveEvent('Ukonczenie kursu');

// console.log(piotr.showSpecieName());
// console.log(piotr.liveEvents);

// console.log(piotr.alive); // mamy tu enkapsulację, 
                          // czyli ukrywamy działanie obiektu udostępniając gettera alive()

// piotr.alive = false; NIE ZADZIAŁA gdy brak settera

// setter !!!!!!!!

const adolf = new Human('Adolf', 'H.');
console.log(adolf);
adolf.alive = false; // przypisujemy wartość do zmiennej, choć w rzeczywistości
                     // jest ona przekazywana do metody settera
console.log(adolf);

************************

		Klasy abstrakcyjne
		
Klasa abstrakcyjna, to klasa na bazie której mogą powstać klasy z niej dziedziczące, ale nie powinniśmy na jej podstawie tworzyć obiektu.

Możemy zabronić tworzenia obiektów na podstawie klasy, czyli np.

class Animal {
    constructor(
        protected readonly specieName: string,
    ) {};
}

const duck = new Animal('duck');

gdy utworzymy ją jako klasę abstrakcyjną:

abstract class Animal {
    constructor(
        protected readonly specieName: string,
    ) {};
}

const duck = new Animal('duck'); // nie zadziała, bo Animal jest klasą abstrakcyjną

********************************

		Typy generyczne
		
Typ generyczny to taki typ, który może mieć subtyp.

np:

const ar: Array<number> = [1, 2, 3];

gdzie typ Array ma podtyp number.

Wszystkie funkcje z async zwracają typ Promise, który jest typem generycznym.
Może on zwracać typ "any", ale też możemy użyć interfejsu, aby dokładnie określić,
co ma być zwrócone:

interface SingleTodo {
    userId: number;
    id: number;
    title: string;
    completed: boolean;
}

async function getTodo(id: number): Promise<SingleTodo> {
    const resp = await fetch(`https://jsonplaceholder.typicode.com/todos/${id}`);
    return await resp.json();
}

(async () => {

    const todo = await getTodo(5); // todo jest domyślnie typu SingleTodo

    console.log(todo.title, todo.completed ? 'Is completed.' : 'Still not completed.');

})();



